/*
 * @Author: Liu Weilong
 * @Date: 2020-09-16 09:55:41
 * @LastEditors: Liu Weilong 
 * @LastEditTime: 2020-09-16 13:15:33
 * @FilePath: /3rd-test-learning/9. ros-melodic/src/ros-melodic-test/src/tmp
 * @Description: 用于测试 ros 显示
 */

#include <ros/ros.h>
#include <ros/timer.h>
#include <visualization_msgs/Marker.h>
#include <geometry_msgs/PointStamped.h>
#include <std_msgs/ColorRGBA.h>
#include <iostream>
#include <vector>
using namespace std;

class VizTest
{
    public:

    VizTest():nh_(){
        pointSub_ = nh_.subscribe("/clicked_point",3,&VizTest::pointCb,this);
        timer_ = nh_.createTimer(ros::Duration(0.3),boost::bind(&VizTest::vizPubCb,this));
        markerPub_ = nh_.advertise<visualization_msgs::Marker>("/Marker_show",0);
        pointsPool_.clear();

        ROS_INFO("viztest initialzation");
    }

    void pointCb(geometry_msgs::PointStampedConstPtr msg)
    {
        ROS_INFO("received a Point %d ",pointsPool_.size());
        pointsPool_.push_back(*msg);
    }

    void vizPubCb()
    {
        ROS_INFO(" in vizPubCb");
        if(!pointsPool_.empty())
        {
            visualization_msgs::Marker marker;
            marker.header.frame_id = 
            marker.header.stamp = ros::Time::now();
            marker.ns = "marker_test_sphere_list";
            marker.id = 0;
            marker.type = visualization_msgs::Marker::SPHERE_LIST;
            marker.action = visualization_msgs::Marker::ADD;
            marker.pose.orientation.x = 0.0;
            marker.pose.orientation.y = 0.0;
            marker.pose.orientation.z = 0.0;
            marker.pose.orientation.w = 1.0;
            marker.pose.position.x = 0;
            marker.scale.x = 0.05;
            marker.scale.y = 0.05;
            marker.scale.z = 0.05;
            marker.color.r = 1.0;
            marker.color.g = 1.0;
            marker.color.b = 1.0;
            marker.color.a = 1.0;
            marker.frame_locked = true;

            for (int x = 0; x < 10; ++x)
            {
            for (int y = 0; y < 10; ++y)
            {
                for (int z = 0; z < 1; ++z)
                {
                geometry_msgs::Point p;
                p.x = x * 0.1f;
                p.y = y * 0.1f;
                p.z = z * 0.1f;

                marker.points.push_back(p);

                std_msgs::ColorRGBA c;
                c.r = x * 0.1;
                c.g = y * 0.1;
                c.b = 0.5;
                c.a = 1.0;
                marker.colors.push_back(c);
                }
            }
            }
    g_marker_pub.publish(marker);
            for(auto point:pointsPool_)
            {               

                marker.points.push_back(point.point);
            }

            markerPub_.publish(marker);
        }


    }
    private:
    
    ros::NodeHandle  nh_;
    ros::Subscriber pointSub_;
    ros::Publisher markerPub_; 
    ros::Timer timer_;
    vector<geometry_msgs::PointStamped> pointsPool_;
};

int main(int argc, char **argv)
{
    ros::init(argc,argv,"viz_test");

    
    VizTest viztest_;
    ros::spin();

    return 0;
}
